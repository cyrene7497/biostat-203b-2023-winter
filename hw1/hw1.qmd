---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 27 @ 11:59PM
author: Cyrene Arputhasamy (705527395)
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2023-winter` and add `Hua-Zhou` and `tomokiokuno0528` as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `master` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `master` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in `main` branch.

4. After each homework due date, course reader and instructor will check out your `master` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data](https://mimic-iv.mit.edu), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. (Hint: The CITI training takes a couple hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

CITI Completion Report: https://www.citiprogram.org/verify/?k8d770661-be97-40a3-b679-e00c20736162-53803788

CITI Completion Certificate: https://www.citiprogram.org/verify/?wf39be852-045b-4a61-9745-3dd9fe63d6f8-53803788



## Q3. Linux Shell Commands

1. The `~/mimic` folder within the Docker container contains data sets from MIMIC-IV. Refer to the documentation <https://mimic.mit.edu/docs/iv/> for details of data files.  
```{bash}
#| eval: true
ls -l ~/mimic
```
Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files on storage and are not big data friendly practices. Just read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

2. Display the contents in the folders `core`, `hosp`, `icu`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

3. Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

Zcat is a bash command for viewing the contents of a compressed file without decompressing it. Zless is a command that creates a soft-copy terminal to examine a compressed or plain text file one screenful at a time without decompressing. Zmore does the same thing to compressed files but has less functionalities, only browsing downwards. The zgrep command searches for particular expressions from a given file even if it's compressed. 

4. What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop.

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on.)

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: true
/opt/homebrew/bin/wget http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. 
Wget is a networking command-line tool to download files from the internet. The wget command was not found in my computer so I found out I needed homebrew for Mac and then installed wget from there. It wasn't working with "wget -nc" so I used "which wget" and found the link of the location which I used to replace "wget -nc" which fixed the problem. 

Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: true
pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o -i $char pg42671.txt | wc -l
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: true
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: true
echo 'hello, world' >> test2.txt
```
'>' is used to overwrite or create a file if it doesn't exist and '>>' is used to append to an existing file, or create it if it doesn't already exist.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: true
chmod 751 middle.sh
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?
The output is the last five lines of the first 20 lines of the text file. "$1" is the file name, "$2" takes the first 20 lines, "$3" takes the last 5 lines of those 20 lines. We need the first line of the shell script to run in the proper shell. 

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2021`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

Cal opens a calendar of the current month.'cal 2021' opens the entire 2021 calendar. 'cal 9 1752' opens a calendar of September 1752. The unusual thing is that it's missing some dates (9/3-9/13). 'date' returns not only the current date but the exact time to the second, and the time zone. 'hostname' returned the name of the host user (.home). `arch` prints the computers architecture. The `uname` command writes to standard output the name of the operating system that you are using. `uptime` tells how long the Linux system has been running. `who am i` tells the username, date and time. `who` tells the users who are currently logged in. `w` returns a summary of every user logged into the computer, when they logged in, and if the user is idle. `id` is used to find out user and group names and numeric ID's associated with users. `last` shows information on the last logged-in users, `last | head` shows the 10 most recent of those. `echo {con,pre}{sent,fer}{s,ed}` distributes each syllable across the other syllable sets to create a list of 8 words (2^3 words). `time sleep 5` pauses execution for 5 seconds. `history | tail` shows the tail (last 10 commands) of the history of commands performed. 